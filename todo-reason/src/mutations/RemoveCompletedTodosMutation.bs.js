// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonRelay = require("reason-relay/src/ReasonRelay.bs.js");
var RemoveCompletedTodosMutation_graphql$MywWebapp = require("../__generated__/RemoveCompletedTodosMutation_graphql.bs.js");

var Mutation = ReasonRelay.MakeCommitMutation(/* module */[/* node */RemoveCompletedTodosMutation_graphql$MywWebapp.node]);

var UseMutation = ReasonRelay.MakeUseMutation(/* module */[/* node */RemoveCompletedTodosMutation_graphql$MywWebapp.node]);

var use = UseMutation[/* use */0];

var commitMutation = Mutation[/* commitMutation */0];

var Mutation$1 = /* module */[
  /* Operation */0,
  /* Mutation */Mutation,
  /* UseMutation */UseMutation,
  /* use */use,
  /* commitMutation */commitMutation
];

function sharedUpdater(store, user, deletedIDs) {
  var userProxy = ReasonRelay.RecordSourceSelectorProxy[/* get */2](store, ReasonRelay.makeDataId(user.id));
  if (userProxy !== undefined) {
    var match = ReasonRelay.ConnectionHandler[/* getConnection */0](Caml_option.valFromOption(userProxy), "TodoList_todos", undefined);
    if (match !== undefined) {
      var connection = Caml_option.valFromOption(match);
      return $$Array.iter((function (id) {
                    return ReasonRelay.ConnectionHandler[/* deleteNode */4](connection, ReasonRelay.makeDataId(id));
                  }), deletedIDs);
    } else {
      return /* () */0;
    }
  } else {
    return /* () */0;
  }
}

function commit(environment, completedTodos, user) {
  return Curry._6(commitMutation, environment, {
              input: {
                userId: user.userId,
                clientMutationId: undefined
              }
            }, (function (store) {
                var completedNodeIds = Belt_Array.keepMap(completedTodos, (function (node) {
                        var match = node.complete;
                        if (match) {
                          return node.id;
                        }
                        
                      }));
                return sharedUpdater(store, user, completedNodeIds);
              }), undefined, (function (store) {
                var payload = ReasonRelay.RecordSourceSelectorProxy[/* getRootField */4](store, "removeCompletedTodos");
                var deletedIDs = payload !== undefined ? Belt_Array.keepMap(Belt_Option.getWithDefault(ReasonRelay.RecordProxy[/* getValueStringArray */7](Caml_option.valFromOption(payload), "deletedTodoIds", undefined), /* array */[]), (function (value) {
                          return value;
                        })) : /* array */[];
                return sharedUpdater(store, user, deletedIDs);
              }), /* () */0);
}

exports.Mutation = Mutation$1;
exports.sharedUpdater = sharedUpdater;
exports.commit = commit;
/* Mutation Not a pure module */
