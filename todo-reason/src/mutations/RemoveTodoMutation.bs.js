// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonRelay = require("reason-relay/src/ReasonRelay.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var RemoveTodoMutation_graphql$MywWebapp = require("../__generated__/RemoveTodoMutation_graphql.bs.js");

var MutationFailed = Caml_exceptions.create("RemoveTodoMutation-MywWebapp.MutationFailed");

var Mutation = ReasonRelay.MakeCommitMutation(/* module */[/* node */RemoveTodoMutation_graphql$MywWebapp.node]);

var UseMutation = ReasonRelay.MakeUseMutation(/* module */[/* node */RemoveTodoMutation_graphql$MywWebapp.node]);

var use = UseMutation[/* use */0];

var commitMutation = Mutation[/* commitMutation */0];

var Mutation$1 = /* module */[
  /* Operation */0,
  /* Mutation */Mutation,
  /* UseMutation */UseMutation,
  /* use */use,
  /* commitMutation */commitMutation
];

function sharedUpdater(store, user, deletedID) {
  var userProxy = ReasonRelay.RecordSourceSelectorProxy[/* get */2](store, ReasonRelay.makeDataId(user.id));
  if (userProxy !== undefined) {
    var match = ReasonRelay.ConnectionHandler[/* getConnection */0](Caml_option.valFromOption(userProxy), "TodoList_todos", undefined);
    if (match !== undefined) {
      return ReasonRelay.ConnectionHandler[/* deleteNode */4](Caml_option.valFromOption(match), ReasonRelay.makeDataId(deletedID));
    } else {
      return /* () */0;
    }
  } else {
    return /* () */0;
  }
}

function commit(environment, todo, user) {
  return Curry._6(commitMutation, environment, {
              input: {
                clientMutationId: undefined,
                id: todo.id,
                userId: user.userId
              }
            }, undefined, undefined, (function (store) {
                var match = ReasonRelay.RecordSourceSelectorProxy[/* getRootField */4](store, "removeTodo");
                if (match !== undefined) {
                  var match$1 = ReasonRelay.RecordProxy[/* getValueString */6](Caml_option.valFromOption(match), "deletedTodoId", undefined);
                  if (match$1 !== undefined) {
                    return sharedUpdater(store, user, match$1);
                  } else {
                    throw [
                          MutationFailed,
                          "Could not find deletedTodoId."
                        ];
                  }
                } else {
                  throw [
                        MutationFailed,
                        "Could not find removeTodo root field."
                      ];
                }
              }), /* () */0);
}

exports.MutationFailed = MutationFailed;
exports.Mutation = Mutation$1;
exports.sharedUpdater = sharedUpdater;
exports.commit = commit;
/* Mutation Not a pure module */
