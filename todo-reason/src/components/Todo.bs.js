// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonRelay = require("reason-relay/src/ReasonRelay.bs.js");
var Utils$MywWebapp = require("../Utils.bs.js");
var TodoTextInput$MywWebapp = require("./TodoTextInput.bs.js");
var Todo_todo_graphql$MywWebapp = require("../__generated__/Todo_todo_graphql.bs.js");
var Todo_user_graphql$MywWebapp = require("../__generated__/Todo_user_graphql.bs.js");
var RemoveTodoMutation$MywWebapp = require("../mutations/RemoveTodoMutation.bs.js");
var RenameTodoMutation$MywWebapp = require("../mutations/RenameTodoMutation.bs.js");
var ChangeTodoStatusMutation$MywWebapp = require("../mutations/ChangeTodoStatusMutation.bs.js");

var UseFragment = ReasonRelay.MakeUseFragment(/* module */[/* fragmentSpec */Todo_todo_graphql$MywWebapp.node]);

function use(fRef) {
  return Curry._1(UseFragment[/* use */0], fRef);
}

var TodoFragment = /* module */[
  /* Operation */0,
  /* UseFragment */UseFragment,
  /* use */use
];

var UseFragment$1 = ReasonRelay.MakeUseFragment(/* module */[/* fragmentSpec */Todo_user_graphql$MywWebapp.node]);

function use$1(fRef) {
  return Curry._1(UseFragment$1[/* use */0], fRef);
}

var UserFragment = /* module */[
  /* Operation */0,
  /* UseFragment */UseFragment$1,
  /* use */use$1
];

function Todo(Props) {
  var userRef = Props.user;
  var todoRef = Props.todo;
  var user = Curry._1(UseFragment$1[/* use */0], userRef);
  var todo = Curry._1(UseFragment[/* use */0], todoRef);
  var environment = ReasonRelay.useEnvironmentFromContext(/* () */0);
  var match = React.useState((function () {
          return false;
        }));
  var setIsEditing = match[1];
  var isEditing = match[0];
  var handleCompleteChange = function (e) {
    var complete = e.currentTarget.checked;
    ChangeTodoStatusMutation$MywWebapp.commit(environment, complete, todo, user);
    return /* () */0;
  };
  var removeTodo = function (param) {
    RemoveTodoMutation$MywWebapp.commit(environment, todo, user);
    return /* () */0;
  };
  var handleDestroyClick = function (param) {
    return removeTodo(/* () */0);
  };
  var handleLabelDoubleClick = function (param) {
    return Curry._1(setIsEditing, (function (param) {
                  return true;
                }));
  };
  var handleTextInputCancel = function (param) {
    return Curry._1(setIsEditing, (function (param) {
                  return false;
                }));
  };
  var handleTextInputDelete = function (param) {
    Curry._1(setIsEditing, (function (param) {
            return false;
          }));
    return removeTodo(/* () */0);
  };
  var handleTextInputSave = function (text) {
    Curry._1(setIsEditing, (function (param) {
            return false;
          }));
    RenameTodoMutation$MywWebapp.commit(environment, text, todo);
    return /* () */0;
  };
  return React.createElement("li", {
              className: Utils$MywWebapp.makeClassNames(/* :: */[
                    /* tuple */[
                      "completed",
                      todo.complete
                    ],
                    /* :: */[
                      /* tuple */[
                        "editing",
                        isEditing
                      ],
                      /* [] */0
                    ]
                  ])
            }, React.createElement("div", {
                  className: "view"
                }, React.createElement("input", {
                      className: "toggle",
                      checked: todo.complete,
                      type: "checkbox",
                      onChange: handleCompleteChange
                    }), React.createElement("label", {
                      onDoubleClick: handleLabelDoubleClick
                    }, todo.text), React.createElement("button", {
                      className: "destroy",
                      onClick: handleDestroyClick
                    })), isEditing ? React.createElement(TodoTextInput$MywWebapp.make, {
                    className: "edit",
                    commitOnBlur: true,
                    initialValue: todo.text,
                    onCancel: handleTextInputCancel,
                    onDelete: handleTextInputDelete,
                    onSave: handleTextInputSave
                  }) : null);
}

var make = Todo;

exports.TodoFragment = TodoFragment;
exports.UserFragment = UserFragment;
exports.make = make;
/* UseFragment Not a pure module */
