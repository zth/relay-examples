// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function TodoTextInput(Props) {
  var className = Props.className;
  var commitOnBlur = Props.commitOnBlur;
  var initialValue = Props.initialValue;
  var onCancel = Props.onCancel;
  var onDelete = Props.onDelete;
  var onSave = Props.onSave;
  var placeholder = Props.placeholder;
  var theInitialValue = Belt_Option.getWithDefault(initialValue, "");
  var match = React.useState((function () {
          return theInitialValue;
        }));
  var setText = match[1];
  var text = match[0];
  var inputRef = React.useRef(null);
  React.useEffect((function () {
          var match = inputRef.current;
          if (!(match == null)) {
            match.focus();
          }
          return undefined;
        }), /* array */[inputRef]);
  var commitChanges = function (param) {
    var newText = $$String.trim(text);
    var exit = 0;
    var exit$1 = 0;
    if (onDelete !== undefined && newText === "") {
      return Curry._1(onDelete, /* () */0);
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      if (onCancel !== undefined && newText === theInitialValue) {
        return Curry._1(onCancel, /* () */0);
      } else {
        exit = 1;
      }
    }
    if (exit === 1) {
      if (newText !== "") {
        Curry._1(onSave, newText);
        return Curry._1(setText, (function (param) {
                      return "";
                    }));
      } else {
        return /* () */0;
      }
    }
    
  };
  var handleBlur = function (param) {
    if (commitOnBlur !== undefined && commitOnBlur) {
      return commitChanges(/* () */0);
    } else {
      return /* () */0;
    }
  };
  var handleChange = function (e) {
    var newText = e.currentTarget.value;
    return Curry._1(setText, (function (param) {
                  return newText;
                }));
  };
  var handleKeyDown = function (e) {
    var match = e.keyCode;
    if (match !== 13) {
      if (match !== 27 || onCancel === undefined) {
        return /* () */0;
      } else {
        return Curry._1(onCancel, /* () */0);
      }
    } else {
      return commitChanges(/* () */0);
    }
  };
  return React.createElement("input", {
              ref: inputRef,
              className: className,
              placeholder: Belt_Option.getWithDefault(placeholder, ""),
              type: "text",
              value: text,
              onKeyDown: handleKeyDown,
              onBlur: handleBlur,
              onChange: handleChange
            });
}

var make = TodoTextInput;

exports.make = make;
/* react Not a pure module */
